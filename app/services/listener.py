import asyncio
import json
from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.utils.markdown import hbold, hitalic
from aiogram.exceptions import TelegramForbiddenError

from app.database.models import listener_engine
from app.database.requests import requests_favorite_notifier as db_notifier
from app.database.requests.requests import get_user_lang
from app.keyboards.keyboards_notifier import get_add_to_subscriptions_keyboard
from app.lexicon import Lexicon
# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
from app.services.recommendation import get_recommended_artists
from app.handlers.subscriptions import RecommendationFlow # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π FSM
from aiogram.fsm.storage.redis import RedisStorage # –ò–ª–∏ –≤–∞—à FSM Storage
from app.keyboards import keyboards as kb
import logging # –î–æ–±–∞–≤—å—Ç–µ –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
from aiogram.fsm.storage.base import BaseStorage
from aiogram.fsm.storage.base import StorageKey


async def notification_handler(bot: Bot, connection, pid, channel, payload):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏ –∏–∑ –ë–î."""
    print(f"\n--- –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç PID {pid} –ø–æ –∫–∞–Ω–∞–ª—É {channel} ---")
    data = json.loads(payload)
    
    artist_info = data.get('artist', {})
    artist_id = artist_info.get('artist_id')
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï --- –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    artist_name_payload = artist_info.get('name') 
    
    event_id = data.get('event_id')
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï --- –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    event_title_payload = data.get('title')
    
    venue_info = data.get('venue', {})
    event_city_name = venue_info.get('city_name', '')
    event_country_name = data.get('country', {}).get('name', '')
    
    if not artist_id or not event_id:
        print("–û—à–∏–±–∫–∞ –≤ payload: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç artist_id –∏–ª–∏ event_id.")
        return

    subscribers = await db_notifier.get_favorite_subscribers_by_artist(artist_id)
    print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ '{artist_name_payload or 'ID:'+str(artist_id)}': {len(subscribers)} —á–µ–ª.")

    for fav_entry in subscribers:
        user = fav_entry.user
        user_regions = fav_entry.regions
        
        is_priority_region = False
        if user_regions and (event_country_name in user_regions or event_city_name in user_regions):
            is_priority_region = True
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï --- –°–æ–∑–¥–∞–µ–º –ª–µ–∫—Å–∏–∫–æ–Ω –¥–ª—è –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lexicon = Lexicon(user.language_code)
        emoji = "üî•" if is_priority_region else "üîî"
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï --- –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–∫—Å–∏–∫–æ–Ω –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        final_artist_name = artist_name_payload or lexicon.get('unknown_artist')
        final_event_title = event_title_payload or lexicon.get('new_event_title')

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï --- –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ –ª–µ–∫—Å–∏–∫–æ–Ω–∞
        text = lexicon.get('new_event_for_favorite_notification').format(
            emoji=emoji,
            artist_name=hbold(final_artist_name),
            event_title=hbold(final_event_title),
            event_city=event_city_name,
            event_country=event_country_name
        )

        try:
            await bot.send_message(
                chat_id=user.user_id,
                text=text,
                reply_markup=get_add_to_subscriptions_keyboard(event_id, lexicon),
                parse_mode=ParseMode.HTML
            )
            print(f"--> –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}")
        except TelegramForbiddenError:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
        
        await asyncio.sleep(0.1)


# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø ---
async def listen_for_db_notifications(bot: Bot, storage: RedisStorage):
    """–°–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –≤ –ë–î –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    print("üì° –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –ë–î...")
    try:
        async with listener_engine.connect() as conn:
            raw_connection = await conn.get_raw_connection()
            asyncpg_conn = raw_connection.driver_connection
            
            # 1. –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ö–ê–ù–ê–õ–ê –°–û–ë–´–¢–ò–ô (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ notification_handler)
            event_handler_with_bot = lambda c, p, ch, pl: asyncio.create_task(notification_handler(bot, c, p, ch, pl))
            await asyncpg_conn.add_listener("new_event_channel", event_handler_with_bot)
            print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª 'new_event_channel' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            
           
            while True:
                await asyncio.sleep(3600)

    except Exception as e:
        print(f"[–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] –í —Å–ª—É—à–∞—Ç–µ–ª–µ –ë–î: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º.")