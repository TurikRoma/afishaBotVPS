# app/handlers/common.py

from collections import defaultdict
from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, BotCommand
from aiogram.utils.markdown import hbold,hitalic

from ..database.requests import requests as db
from ..database.models import async_session
from app import keyboards as kb
from ..lexicon import Lexicon, LEXICON_COMMANDS_RU, LEXICON_COMMANDS_EN, EVENT_TYPE_EMOJI
from app.handlers.onboarding import start_onboarding_process


COUNTRY_CURRENCY_MAP = {
    '–ë–µ–ª–∞—Ä—É—Å—å': 'BYN',
    '–†–æ—Å—Å–∏—è': 'RUB',
    # –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã —Å—é–¥–∞
}

DEFAULT_CURRENCY = '$'

def format_price(event, min_price, max_price, country_name: str, lexicon: Lexicon) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É —Å–æ–±—ã—Ç–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è—è –≤–∞–ª—é—Ç—É –ø–æ —Å—Ç—Ä–∞–Ω–µ.
    - event: –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å event.min_price, event.max_price –∏ event.venue.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–ª—é—Ç—É
    currency = COUNTRY_CURRENCY_MAP.get(country_name, DEFAULT_CURRENCY)

    min_price_str = f"{int(min_price)}" if min_price and min_price % 1 == 0 else f"{min_price}"
    max_price_str = f"{int(max_price)}" if max_price and max_price % 1 == 0 else f"{max_price}"

    if min_price and max_price and min_price != max_price:
        price_info = f"–æ—Ç {min_price_str} –¥–æ {max_price_str} {currency}"
    elif min_price:
        price_info = f"–æ—Ç {min_price_str} {currency}"
    else:
        price_info = "‚Äî"
        
    return price_info

async def set_main_menu(bot: Bot, lang: str):
    commands = LEXICON_COMMANDS_RU if lang in ('ru', 'be') else LEXICON_COMMANDS_EN
    main_menu_commands = [BotCommand(command=cmd, description=desc) for cmd, desc in commands.items()]
    await bot.set_my_commands(main_menu_commands)

async def format_events_with_headers(events_by_category: dict,city_name: str, lexicon) -> tuple[str, list[int]]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å {–∫–∞—Ç–µ–≥–æ—Ä–∏—è: [—Å–æ–±—ã—Ç–∏—è]} –≤ –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∫–≤–æ–∑–Ω–æ–π —Å–ø–∏—Å–æ–∫ ID.
    """
    if not events_by_category:
        return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", []
    
    country_name = await db.get_country_by_city_name(city_name)

    response_parts = []
    event_ids_in_order = []
    counter = 1  # –°–∫–≤–æ–∑–Ω–æ–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏

    for category_name, events in events_by_category.items():
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        emoji = EVENT_TYPE_EMOJI.get(category_name, "üîπ")
        response_parts.append(f"\n\n--- {emoji} {hbold(category_name)} ---\n")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for event in events:
            event_ids_in_order.append(event.event_id)
            
            # –ù—É–º–µ—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é —Å–∫–≤–æ–∑–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
            title_text = hbold(f"{counter}. {event.title}")
            counter += 1

            # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è
            url = event.links[0] if hasattr(event, 'links') and event.links and event.links[0] else None
            title_link = f'<a href="{url}">{title_text}</a>' if url else title_text
            
            place_info = event.venue_name or "‚Äî"
            
            dates_str = sorted(list(set(format_event_date(d, lexicon) for d in event.dates if d))) # –ù–û–í–ê–Ø –°–¢–†–û–ö–ê
            dates_info = "\n".join(f"‚ñ´Ô∏è {d}" for d in dates_str) if dates_str else "‚Äî"
            
            price_info = format_price(event, event.min_price, event.max_price, country_name, lexicon)
            
            event_card = (f"{title_link}\n\n"
                          f"üìç <b>–ú–µ—Å—Ç–æ:</b> <i>{place_info}</i>\n"
                          f"üí∞ <b>–¶–µ–Ω–∞:</b> <i>{price_info}</i>\n\n"
                          f"üìÖ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã:</b>\n<i>{dates_info}</i>")
            response_parts.append(event_card)

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –≤ –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç
    return "\n".join(response_parts), event_ids_in_order


async def format_events_for_response(events: list,lexicon) -> str:
    if not events: return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    response_parts = []
    event_ids_in_order = []
    for event in events:
        event_ids_in_order.append(event.event_id)
        url = event.links[0].url if event.links else None
        title = hbold(event.title)
        title_link = f'<a href="{url}">{title}</a>' if url else title
        place_info = f"{event.venue.name}, {event.venue.city.name}" if event.venue and event.venue.city else (
            event.venue.name if event.venue else "‚Äî")
        date_start_info = format_event_date(event.date_start, lexicon)
        price_info = "‚Äî"
        if event.price_min and event.price_max:
            price_info = f"–æ—Ç {event.price_min} –¥–æ {event.price_max} BYN"
        elif event.price_min:
            price_info = f"–æ—Ç {event.price_min} BYN"
        when_info = event.description or "‚Äî"
        event_card = (f"{title_link}\n\n"
                      f"üìç <b>–ú–µ—Å—Ç–æ:</b> <i>{place_info}</i>\n"
                      f"üïí <b>–í—Ä–µ–º—è:</b> <i>{when_info}</i>\n"
                      f"üìÖ <b>–ù–∞—á–∞–ª–æ:</b> <i>{date_start_info}</i>\n"
                      f"üí∞ <b>–¶–µ–Ω–∞:</b> <i>{price_info}</i>")
        response_parts.append(event_card)
    separator = "\n\n" + "‚Äî" * 15 + "\n\n"
    return separator.join(response_parts)

async def format_events_by_artist(
    events: list,
    target_artist_names: list[str], # <-- –ù–û–í–´–ô –ê–†–ì–£–ú–ï–ù–¢
    lexicon: Lexicon
) -> tuple[str | None, list[int] | None]:
    # ...
    if not events:
        return None, None

    # 1. –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –∏–º–µ–Ω–∏ –∞—Ä—Ç–∏—Å—Ç–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º, –∫–æ–≥–æ –º—ã –∏—Å–∫–∞–ª–∏
    events_by_artist = defaultdict(list)
    
    # –°–æ–∑–¥–∞–µ–º set –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    target_artist_set = set(name.lower() for name in target_artist_names)
    for event in events:
        for event_artist in event.artists:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞—Ä—Ç–∏—Å—Ç —Å–æ–±—ã—Ç–∏—è –æ–¥–Ω–∏–º –∏–∑ —Ç–µ—Ö, –∫–æ–≥–æ –º—ã –∏—Å–∫–∞–ª–∏
            if event_artist.artist.name.lower() in target_artist_set:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –∏–∑ –ë–î
                events_by_artist[event_artist.artist.name].append(event)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–≥–æ –≤—ã–≤–æ–¥–∞
    sorted_artist_names = sorted(events_by_artist.keys())

    response_parts = []
    event_ids_in_order = []
    counter = 1  # –°–∫–≤–æ–∑–Ω–æ–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏

    # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
    for artist_name in sorted_artist_names:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã —Å–æ–±—ã—Ç–∏–π –∞—Ä—Ç–∏—Å—Ç–∞
        response_parts.append(f"\n\n‚Äî‚Äî‚Äî üé§ {hbold(artist_name.upper())} ‚Äî‚Äî‚Äî\n")

        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π
        unique_events_for_artist = sorted(
            list(set(events_by_artist[artist_name])), 
            key=lambda e: (e.date_start is None, e.date_start) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        )

        for event in unique_events_for_artist:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø–æ–¥ —ç–≥–∏–¥–æ–π –¥—Ä—É–≥–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
            if event.event_id in event_ids_in_order:
                continue

            event_ids_in_order.append(event.event_id)
            
            # --- –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è (–ø–æ—á—Ç–∏ –∫–∞–∫ –≤ reminder) ---
            
            # –î–∞—Ç–∞
            date_str = format_event_date(event.date_start, lexicon)
            
            # –ú–µ—Å—Ç–æ
            place_info = "‚Äî"
            if event.venue:
                city_name = event.venue.city.name if event.venue.city else ""
                country_name = event.venue.city.country.name if event.venue.city and event.venue.city.country else ""
                place_info = f"{event.venue.name}, {city_name} ({country_name})"

            # –ë–∏–ª–µ—Ç—ã
            tickets_str = event.tickets_info if event.tickets_info and event.tickets_info != "–í –Ω–∞–ª–∏—á–∏–∏" else lexicon.get('no_info') # –î–æ–±–∞–≤—å—Ç–µ 'no_info': '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏' –≤ –ª–µ–∫—Å–∏–∫–æ–Ω
            
            # –°—Å—ã–ª–∫–∞
            url = event.links[0].url if event.links else None
            title_text = f"{counter}. {event.title}"
            title_with_link = f'<a href="{url}">{hbold(title_text)}</a>' if url else hbold(title_text)
            
            # –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
            event_card = (
                f"{title_with_link}\n"
                f"üìÖ {date_str}\n"
                f"üìç {hitalic(place_info)}\n"
                f"üéüÔ∏è –ë–∏–ª–µ—Ç—ã: {hitalic(tickets_str)}"
            )
            response_parts.append(event_card)
            counter += 1

    if not response_parts:
        return None, None
        
    return "\n".join(response_parts), event_ids_in_order


async def format_events_by_artist_with_region_split(
    events: list,
    tracked_regions: list[str],
    lexicon: Lexicon
) -> tuple[str | None, list[int] | None]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –Ω–∞ –¥–≤–µ –≥—Ä—É–ø–ø—ã: –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö –∏ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ —Å–∫–≤–æ–∑–Ω–æ–π —Å–ø–∏—Å–æ–∫ ID —Å–æ–±—ã—Ç–∏–π.
    """
    if not events:
        return None, None

    # 1. –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –¥–≤–µ –≥—Ä—É–ø–ø—ã
    events_in_tracked_regions = []
    events_in_other_regions = []
    tracked_regions_set = set(r.lower() for r in tracked_regions)

    for event in events:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ (–Ω–∞ —Å–ª—É—á–∞–π –¥—É–±–ª–µ–π –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        is_already_added = any(e.event_id == event.event_id for e in events_in_tracked_regions + events_in_other_regions)
        if is_already_added:
            continue
            
        event_country = event.venue.city.country.name.lower() if event.venue and event.venue.city and event.venue.city.country else ""
        event_city = event.venue.city.name.lower() if event.venue and event.venue.city else ""
        
        if event_country in tracked_regions_set or event_city in tracked_regions_set:
            events_in_tracked_regions.append(event)
        else:
            events_in_other_regions.append(event)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–µ –≥—Ä—É–ø–ø—ã –ø–æ –¥–∞—Ç–µ
    events_in_tracked_regions.sort(key=lambda e: (e.date_start is None, e.date_start))
    events_in_other_regions.sort(key=lambda e: (e.date_start is None, e.date_start))

    # 2. –°–æ–±–∏—Ä–∞–µ–º –µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    # –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä–∏-–º–∞—Ä–∫–µ—Ä—ã, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –≥–¥–µ –≤—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
    items_to_format = []
    if events_in_tracked_regions:
        items_to_format.append({'type': 'header', 'text': lexicon.get('favorite_events_in_tracked_regions')})
        items_to_format.extend(events_in_tracked_regions)

    if events_in_other_regions:
        # –ï—Å–ª–∏ –±—ã–ª–∏ —Å–æ–±—ã—Ç–∏—è –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö, –¥–æ–±–∞–≤–∏–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if events_in_tracked_regions:
             items_to_format.append({'type': 'separator'})
        items_to_format.append({'type': 'header', 'text': lexicon.get('favorite_events_in_other_regions')})
        items_to_format.extend(events_in_other_regions)

    if not items_to_format:
        return None, None

    # 3. –ï–¥–∏–Ω—ã–π —Ü–∏–∫–ª —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    response_parts = []
    event_ids_in_order = []
    counter = 1

    for item in items_to_format:
        # –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Ä–∫–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if isinstance(item, dict) and item['type'] == 'header':
            response_parts.append(hbold(item['text']))
            continue
        # –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Ä–∫–µ—Ä —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        if isinstance(item, dict) and item['type'] == 'separator':
            response_parts.append("\n" + "‚Äî" * 15 + "\n")
            continue
            
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è (event)
        event = item
        event_ids_in_order.append(event.event_id)

        # --- –ë–ª–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ (—Ç–µ–ø–µ—Ä—å –æ–Ω –∑–¥–µ—Å—å –æ–¥–∏–Ω —Ä–∞–∑) ---
        date_str = format_event_date(event.date_start, lexicon)
        place_info = "‚Äî"
        if event.venue:
            city_name = event.venue.city.name if event.venue.city else ""
            country_name = event.venue.city.country.name if event.venue.city and event.venue.city.country else ""
            place_info = f"{event.venue.name}, {city_name} ({country_name})"
        tickets_str = event.tickets_info if event.tickets_info and event.tickets_info != "–í –Ω–∞–ª–∏—á–∏–∏" else lexicon.get('no_info')
        url = event.links[0].url if event.links else None
        title_text = f"{counter}. {event.title}"
        title_with_link = f'<a href="{url}">{hbold(title_text)}</a>' if url else hbold(title_text)
        
        event_card = (
            f"{title_with_link}\n"
            f"üìÖ {date_str}\n"
            f"üìç {hitalic(place_info)}\n"
            f"üéüÔ∏è –ë–∏–ª–µ—Ç—ã: {hitalic(tickets_str)}"
        )
        response_parts.append(event_card)
        counter += 1
        
    return "\n\n".join(response_parts), event_ids_in_order

def format_event_date(date_obj: datetime | None, lexicon: Lexicon) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è.
    - –ï—Å–ª–∏ –¥–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'.
    - –ï—Å–ª–∏ –≤—Ä–µ–º—è 00:00, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É '–î–î.–ú–ú.–ì–ì–ì–ì'.
    - –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç '–î–î.–ú–ú.–ì–ì–ì–ì –≤ –ß–ß:–ú–ú'.
    """
    if not date_obj:
        return lexicon.get('date_not_specified')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è "–Ω—É–ª–µ–≤—ã–º"
    if date_obj.hour == 0 and date_obj.minute == 0 and date_obj.second == 0:
        return date_obj.strftime('%d.%m.%Y')
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º '–≤' –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ –∏ 'at' –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
        separator = ' –≤ ' if lexicon.lang_code == 'ru' else ' at '
        return date_obj.strftime(f'%d.%m.%Y{separator}%H:%M')