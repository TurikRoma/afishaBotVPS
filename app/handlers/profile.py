# app/handlers/profile.py

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hbold

from ..database.requests import requests as db
from app import keyboards as kb
from ..lexicon import Lexicon
from .states import SubscriptionFlow 
from ..database.models import Event, Subscription # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è type hinting
from aiogram.exceptions import TelegramBadRequest
from ..lexicon import get_event_type_keys, get_event_type_storage_value
from app.handlers.favorities import show_favorites_list
from .search_cities import start_city_search, process_city_input, back_to_city_list
from aiogram.filters import Command, or_f # –î–æ–±–∞–≤–ª—è–µ–º or_f
from .search_countries import start_country_search, process_country_input as process_country_search
from app.utils.utils import format_event_date

router = Router()

# FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–µ–æ
class EditMainGeoFSM(StatesGroup):
    choosing_country = State()
    choosing_city = State()
    waiting_city_input = State()
    choosing_event_types = State()

# FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
class ProfileFSM(StatesGroup):
    viewing_subscription = State()
    editing_subscription_regions = State()

class EditMobilityFSM(StatesGroup):
    selecting_regions = State()
    waiting_country_input = State()


# --- –•–µ–ª–ø–µ—Ä—ã –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è ---
async def show_profile_menu(callback_or_message: Message | CallbackQuery, state: FSMContext):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è."""
    current_data = await state.get_data()
    data_to_keep = {
        'messages_to_delete_on_expire': current_data.get('messages_to_delete_on_expire'),
        'last_shown_event_ids': current_data.get('last_shown_event_ids')
    }
    await state.clear()
    data_to_restore = {k: v for k, v in data_to_keep.items() if v is not None}
    if data_to_restore:
        await state.update_data(data_to_restore)
    user_lang = await db.get_user_lang(callback_or_message.from_user.id)
    lexicon = Lexicon(user_lang)
    text = lexicon.get('profile_menu_header')
    markup = kb.get_profile_keyboard(lexicon)
    if isinstance(callback_or_message, CallbackQuery):
        await callback_or_message.message.edit_text(text=text, reply_markup=markup)
    else:
        await callback_or_message.answer(text=text, reply_markup=markup)

@router.message(Command('settings'))
@router.message(F.text.in_(['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üë§ Profile', 'üë§ –ü—Ä–æ—Ñ—ñ–ª—å']))
async def menu_profile(message: Message, state: FSMContext):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é '–ü—Ä–æ—Ñ–∏–ª—å'."""
    await show_profile_menu(message, state)

@router.callback_query(F.data == "back_to_profile")
async def cq_back_to_profile(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è."""
    await show_profile_menu(callback, state)
    await callback.answer()


# --- –§–ª–æ—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –û–°–ù–û–í–ù–û–ì–û –ì–ï–û (—Å –ø–æ–∏—Å–∫–æ–º –≥–æ—Ä–æ–¥–∞) ---
@router.callback_query(F.data == "edit_main_geo")
async def cq_edit_main_geo_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ñ–ª–æ—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–µ–æ."""
    await state.set_state(EditMainGeoFSM.choosing_country)
    lexicon = Lexicon(callback.from_user.language_code)
    text = lexicon.get('edit_geo_choose_country_prompt')
    countries_to_show = await db.get_countries(home_country_selection=True)
    await callback.message.edit_text(
        text,
        reply_markup=kb.get_edit_country_keyboard(countries_to_show, lexicon)
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_edit_country")
async def cq_back_to_edit_country(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    await cq_edit_main_geo_start(callback, state)

@router.callback_query(EditMainGeoFSM.choosing_country, F.data.startswith("edit_country:"))
async def cq_edit_country_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    country_name = callback.data.split(":", 1)[1]
    await state.update_data(home_country=country_name)
    await state.set_state(EditMainGeoFSM.choosing_city)
    lexicon = Lexicon(callback.from_user.language_code)
    top_cities = await db.get_top_cities_for_country(country_name)
    text = lexicon.get('edit_geo_city_prompt').format(country_name=hbold(country_name))
    await callback.message.edit_text(
        text,
        reply_markup=kb.get_edit_city_keyboard(top_cities, lexicon),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(EditMainGeoFSM.choosing_city, F.data == "edit_search_for_city")
async def cq_edit_search_for_city(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    await start_city_search(
        callback, 
        state, 
        new_state=EditMainGeoFSM.waiting_city_input,
        back_callback="back_to_edit_city_list"
    )


@router.message(EditMainGeoFSM.waiting_city_input, F.text)
async def process_edit_city_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞."""
    await process_city_input(
        message=message,
        state=state,
        country_key="home_country",
        return_state=EditMainGeoFSM.choosing_city,
        found_cities_kb=kb.get_edit_found_cities_keyboard
    )


@router.callback_query(or_f(EditMainGeoFSM.choosing_city, EditMainGeoFSM.waiting_city_input), F.data == "back_to_edit_city_list")
async def cq_back_to_edit_city_list(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
    await state.set_state(EditMainGeoFSM.choosing_city)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
    await back_to_city_list(
        callback=callback,
        state=state,
        country_key="home_country",
        city_prompt_key='edit_geo_city_prompt',
        city_selection_kb=kb.get_edit_city_keyboard
    )

@router.callback_query(EditMainGeoFSM.choosing_city, F.data.startswith("edit_city:"))
async def cq_edit_city_selected(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    city_name = callback.data.split(":", 1)[1]
    await state.update_data(home_city=city_name)
    await state.set_state(EditMainGeoFSM.choosing_event_types)
    
    lexicon = Lexicon(callback.from_user.language_code)
    
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ –ë–î ---
    prefs = await db.get_user_preferences(callback.from_user.id)
    current_types = prefs.get("preferred_event_types", []) if prefs else []
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ state, —á—Ç–æ–±—ã —Ö—ç–Ω–¥–ª–µ—Ä toggle –º–æ–≥ —Å –Ω–∏–º–∏ —Ä–∞–±–æ—Ç–∞—Ç—å
    await state.update_data(selected_event_types=current_types)
    # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

    text = lexicon.get('edit_geo_event_types_prompt').format(city_name=hbold(city_name))    
    await callback.message.edit_text(
        text,
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∏–ø—ã –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –æ–Ω–∞ –æ—Ç—Ä–∏—Å–æ–≤–∞–ª–∞ –≥–∞–ª–æ—á–∫–∏
        reply_markup=kb.get_edit_event_type_keyboard(lexicon, current_types),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(EditMainGeoFSM.choosing_event_types, F.data.startswith("edit_toggle_event_type:"))
async def cq_edit_toggle_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä/—Å–Ω—è—Ç–∏–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    event_type_key = callback.data.split(":")[1]
    
    data = await state.get_data()
    selected_values = data.get("selected_event_types", [])

    all_event_keys = get_event_type_keys()
    all_storage_values = [get_event_type_storage_value(key) for key in all_event_keys]
    
    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ö–ù–û–ü–û–ö ---
    if event_type_key == 'all':
        current_selection_set = set(selected_values)
        all_values_set = set(all_storage_values)
        
        if current_selection_set != all_values_set:
            selected_values = all_storage_values
        else:
            selected_values = []
    else:
        if event_type_key in selected_values:
            selected_values.remove(event_type_key)
        else:
            selected_values.append(event_type_key)
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    await state.update_data(selected_event_types=selected_values)
    lexicon = Lexicon(callback.from_user.language_code)
    
    try:
        await callback.message.edit_reply_markup(
            reply_markup=kb.get_edit_event_type_keyboard(lexicon, selected_values)
        )
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise
    
    await callback.answer()

@router.callback_query(EditMainGeoFSM.choosing_event_types, F.data == "finish_edit_preferences")
async def cq_edit_finish(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å."""
    data = await state.get_data()
    selected_event_types = data.get("selected_event_types", [])
    lexicon = Lexicon(callback.from_user.language_code)
    if not selected_event_types:
        await callback.answer(lexicon.get('select_at_least_one_event_type_alert'), show_alert=True)
        return
    await db.update_user_preferences(
        user_id=callback.from_user.id,
        home_country=data.get("home_country"),
        home_city=data.get("home_city"),
        event_types=selected_event_types,
        main_geo_completed=True
    )
    await callback.answer(lexicon.get('settings_changed_successfully_alert'), show_alert=True)
    await show_profile_menu(callback, state)


# --- –§–ª–æ—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –û–ë–©–ï–ô –ú–û–ë–ò–õ–¨–ù–û–°–¢–ò ---
@router.callback_query(F.data == "edit_general_mobility")
async def cq_edit_general_mobility(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ñ–ª–æ—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–µ–π –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –°–í–û–Æ FSM."""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ù–ê–®–ï–ô –Ω–æ–≤–æ–π FSM
    await state.set_state(EditMobilityFSM.selecting_regions)
    user_lang = callback.from_user.language_code
    lexicon = Lexicon(user_lang)
    
    current_regions = await db.get_general_mobility(callback.from_user.id) or []
    await state.update_data(selected_regions=current_regions)
    
    await callback.message.edit_text(
        lexicon.get('edit_mobility_prompt'),
        reply_markup=kb.get_region_selection_keyboard(
            selected_regions=current_regions,
            finish_callback="finish_mobility_edit",
            back_callback="back_to_profile",
            search_callback="search_for_mobility_country", # <-- –ù–æ–≤—ã–π callback
            lexicon=lexicon
        )
    )
    await callback.answer()


@router.callback_query(EditMobilityFSM.selecting_regions, F.data == "search_for_mobility_country")
async def cq_search_for_mobility_country(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –æ–±—â–µ–π –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏."""
    await start_country_search(
        callback,
        state,
        new_state=EditMobilityFSM.waiting_country_input,
        back_callback="back_to_general_mobility_selection" # Callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    )

@router.message(EditMobilityFSM.waiting_country_input, F.text)
async def process_mobility_country_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –æ–±—â–µ–π –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏."""
    await process_country_search(
        message=message,
        state=state,
        return_state=EditMobilityFSM.selecting_regions,
        back_callback="back_to_general_mobility_selection"
    )


@router.callback_query(SubscriptionFlow.selecting_general_regions, F.data == "finish_general_edit_from_profile")
async def cq_finish_general_edit_from_profile(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    regions = data.get("selected_regions", [])
    lexicon = Lexicon(callback.from_user.language_code)
    
    if not regions:
        await callback.answer(lexicon.get('no_regions_selected_alert'), show_alert=True)
        return

    await db.set_general_mobility(callback.from_user.id, regions)
    await callback.answer(lexicon.get('mobility_saved_alert'), show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è, –∞ –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ñ–ª–æ—É –ø–æ–¥–ø–∏—Å–æ–∫
    await show_profile_menu(callback, state)


# --- –§–ª–æ—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–û–î–ü–ò–°–ö–ê–ú–ò ---
async def show_subscriptions_list(callback_or_message: Message | CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è."""
    current_data = await state.get_data()
    data_to_keep = {
        'messages_to_delete_on_expire': current_data.get('messages_to_delete_on_expire'),
        'last_shown_event_ids': current_data.get('last_shown_event_ids')
    }
    await state.clear()
    data_to_restore = {k: v for k, v in data_to_keep.items() if v is not None}
    if data_to_restore:
        await state.update_data(data_to_restore)
    user_id = callback_or_message.from_user.id
    user_lang = await db.get_user_lang(callback_or_message.from_user.id)
    lexicon = Lexicon(user_lang)
    
    subs = await db.get_user_subscriptions(user_id)
    
    text = lexicon.get('subs_menu_header_active')
    if not subs:
        text = lexicon.get('subs_menu_header_empty')
    
    markup = kb.get_manage_subscriptions_keyboard(subs, lexicon)

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(callback_or_message, CallbackQuery):
        # –ï—Å–ª–∏ —ç—Ç–æ callback, –≤—Å–µ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        await callback_or_message.message.edit_text(text=text, reply_markup=markup)
        await callback_or_message.answer()
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await callback_or_message.answer(text=text, reply_markup=markup)


@router.message(F.text.in_(['‚≠ê –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', '‚≠ê My Subs']))
async def menu_show_subscriptions(message: Message, state: FSMContext):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    await show_subscriptions_list(message, state)

@router.callback_query(F.data == "manage_favorites")
async def cq_manage_favorites(callback: CallbackQuery, state: FSMContext):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞–∑–¥–µ–ª '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ' –∏–∑ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è."""
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —É–º–µ–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
    await show_favorites_list(callback, state, True)

    
@router.callback_query(F.data == "back_to_subscriptions_list")
async def cq_back_to_subscriptions_list(callback: CallbackQuery, state: FSMContext):
    print('a')
    await show_subscriptions_list(callback, state)

@router.callback_query(F.data.startswith("view_subscription:"))
async def cq_view_subscription(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ–¥–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ."""
    lexicon = Lexicon(callback.from_user.language_code)
    try:
        event_id = int(callback.data.split(":", 1)[1])
    except (ValueError, IndexError):
        await callback.answer(lexicon.get('invalid_event_id_error'), show_alert=True)
        return

    sub_details = await db.get_subscription_details(callback.from_user.id, event_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    async with db.async_session() as session:
        event_details = await session.get(Event, event_id)

    if not sub_details or not event_details:
        print('b')
        await callback.answer(lexicon.get('sub_or_event_not_found_error'), show_alert=True)
        await show_subscriptions_list(callback, state)
        return

    lexicon = Lexicon(callback.from_user.language_code)
    status_text = lexicon.get('subs_status_active') if sub_details.status == 'active' else lexicon.get('subs_status_paused')
    date_str = format_event_date(event_details.date_start, lexicon)
    
    text = lexicon.get('subscription_details_view').format(
        title=hbold(event_details.title),
        date=date_str,
        status=status_text
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=kb.get_single_subscription_manage_keyboard(event_id, sub_details.status, lexicon),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("toggle_sub_status:"))
async def cq_toggle_subscription_status(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ (active/paused)."""
    lexicon = Lexicon(callback.from_user.language_code)
    try:
        event_id = int(callback.data.split(":")[1])
    except (ValueError, IndexError):
        await callback.answer(lexicon.get('invalid_event_id_error'), show_alert=True)
        return
        
    user_id = callback.from_user.id
    lexicon = Lexicon(callback.from_user.language_code)
    
    current_sub = await db.get_subscription_details(user_id, event_id)
    
    if current_sub:
        new_status = 'paused' if current_sub.status == 'active' else 'active'
        await db.set_subscription_status(user_id, event_id, new_status)
        
        alert_text = lexicon.get('subs_paused_alert') if new_status == 'paused' else lexicon.get('subs_resumed_alert')
        await callback.answer(alert_text, show_alert=True)
        
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç callback, –∞ –Ω–µ callback.message
        await show_subscriptions_list(callback, state)
    else:
        await callback.answer(lexicon.get('subs_not_found_alert'), show_alert=True)

@router.callback_query(F.data.startswith("delete_subscription:"))
async def cq_delete_subscription(callback: CallbackQuery, state: FSMContext):
    lexicon = Lexicon(callback.from_user.language_code)
    try:
        event_id = int(callback.data.split(":", 1)[1])
    except (ValueError, IndexError):
        await callback.answer(lexicon.get('invalid_event_id_error'), show_alert=True)
        return
    
    # 1. –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î
    await db.remove_subscription(callback.from_user.id, event_id)
    
    # 2. –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—Ö–µ
    lexicon = Lexicon(callback.from_user.language_code)
    
    # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è
    # –í–ê–ñ–ù–û: –ú—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–¥–∞—Ç—å state, —Ç–∞–∫ –∫–∞–∫ show_subscriptions_list –µ–≥–æ –æ–∂–∏–¥–∞–µ—Ç
    await show_subscriptions_list(callback, state)  




@router.callback_query(
    or_f(EditMobilityFSM.selecting_regions, EditMobilityFSM.waiting_country_input),
    F.data.startswith("toggle_region:")
)
async def cq_toggle_mobility_region(callback: CallbackQuery, state: FSMContext):
    region_name = callback.data.split(":")[1]
    data = await state.get_data()
    selected = data.get("selected_regions", [])
    
    if region_name in selected:
        selected.remove(region_name)
    else:
        selected.append(region_name)
        
    await state.update_data(selected_regions=selected)

    # --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
    # –ï—Å–ª–∏ –º—ã –ø—Ä–∏—à–ª–∏ –∏–∑ –ø–æ–∏—Å–∫–∞, –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞
    current_state = await state.get_state()
    user_lang = await db.get_user_lang(callback.from_user.id)
    lexicon = Lexicon(user_lang)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ state
    await state.set_state(EditMobilityFSM.selecting_regions)
    await callback.message.edit_text(
        lexicon.get('edit_mobility_prompt'),
        reply_markup=kb.get_region_selection_keyboard(
            selected_regions=selected,
            finish_callback="finish_mobility_edit",
            back_callback="back_to_profile",
            search_callback="search_for_mobility_country",
            lexicon=lexicon
        )
    )
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
    await callback.answer()

@router.callback_query(EditMobilityFSM.waiting_country_input, F.data == "back_to_general_mobility_selection")
async def cq_back_to_general_mobility_selection(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω—ã –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É –≤—ã–±–æ—Ä–∞ –æ–±—â–µ–π –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏."""
    # await cq_edit_general_mobility(callback, state)

    await state.set_state(EditMobilityFSM.selecting_regions)
    data = await state.get_data()
    selected_regions = data.get("selected_regions", [])
    user_lang = await db.get_user_lang(callback.from_user.id)
    lexicon = Lexicon(user_lang)

    await callback.message.edit_text(
        lexicon.get('edit_mobility_prompt'),
        reply_markup=kb.get_region_selection_keyboard(
            selected_regions=selected_regions,
            finish_callback="finish_mobility_edit",
            back_callback="back_to_profile",
            search_callback="search_for_mobility_country",
            lexicon=lexicon
        )
    )


@router.callback_query(EditMobilityFSM.selecting_regions, F.data == "finish_mobility_edit")
async def cq_finish_mobility_edit(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    regions = data.get("selected_regions", [])
    lexicon = Lexicon(callback.from_user.language_code)

    await db.set_general_mobility(callback.from_user.id, regions)
    await callback.answer(lexicon.get('mobility_saved_alert'), show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
    await show_profile_menu(callback, state)

