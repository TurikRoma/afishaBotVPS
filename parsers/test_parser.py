import asyncio
import json
import re
import sys
from dataclasses import dataclass, asdict
from typing import Optional, Dict, List
import logging

from playwright.async_api import async_playwright, Browser, TimeoutError as PlaywrightTimeoutError

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ---
CONCURRENT_EVENTS = 5
logger = logging.getLogger()

# --- –ú–û–î–ï–õ–¨ –î–õ–Ø –°–´–†–´–• –î–ê–ù–ù–´–• ---
@dataclass
class EventData:
    link: str
    title: Optional[str] = None
    place: Optional[str] = None
    time_string: Optional[str] = None # <-- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏
    full_description: Optional[str] = None
    price_min: Optional[float] = None
    price_max: Optional[float] = None
    tickets_available: Optional[int] = None
    status: str = "ok"


async def parse_single_event(browser: Browser, event_url: str) -> Dict:
    """–°–æ–±–∏—Ä–∞–µ—Ç –í–°–ï —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–±—ã—Ç–∏—è, –Ω–æ –ù–ï –≤—ã–∑—ã–≤–∞–µ—Ç AI."""
    page = None
    try:
        page = await browser.new_page()
        await page.goto(event_url, timeout=60000)

        # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ JSON –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        try:
            details_json = await page.evaluate('() => window.concertDetails')
        except Exception:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ 'window.concertDetails' –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")

        if not details_json:
            raise ValueError("–û–±—ä–µ–∫—Ç 'window.concertDetails' –ø—É—Å—Ç.")

        title = details_json.get('title')
        place = details_json.get('venueDescription')
        time_string = details_json.get('localisedStartDate') # <-- –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π
        
        price_min_raw = details_json.get('minPrice')
        price_min = float(price_min_raw) if price_min_raw is not None else None
        
        price_max = None
        prices_str = details_json.get('prices', '')
        if prices_str:
            prices_list = [float(p) for p in re.findall(r'\d+\.?\d*', prices_str.replace(',', '.'))]
            if len(prices_list) > 1:
                price_max = max(prices_list)

        # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –ü–û–õ–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ
        full_description = None
        description_selector = 'div.concert_details_description_description_inner'
        if await page.locator(description_selector).count() > 0:
            raw_text = await page.locator(description_selector).inner_text()
            lines = [line.strip() for line in raw_text.split('\n')]
            full_description = '\n'.join(line for line in lines if line)

        # 3. –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤
        tickets_available = 0
        shop_url_button = page.locator('button[data-shopurl]').first
        if await shop_url_button.count() > 0:
            shop_url = await shop_url_button.get_attribute('data-shopurl')
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–ª–µ—Ç–æ–≤
            await page.goto(shop_url, timeout=60000)
            
            ticket_cells_selector = '[data-cy="price-zone-free-places"], .cdk-column-freePlaces'
            
            async def find_and_sum_tickets(search_context) -> Optional[int]:
                try:
                    await search_context.wait_for_selector(ticket_cells_selector, state='visible', timeout=15000)
                    await search_context.wait_for_timeout(500) # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ä–∏—Å–æ–≤–∫—É
                    all_counts_text = await search_context.locator(ticket_cells_selector).all_inner_texts()
                    if not all_counts_text: return 0
                    return sum(int(match.group(0)) for text in all_counts_text if (match := re.search(r'\d+', text)))
                except PlaywrightTimeoutError:
                    return None

            tickets_available = await find_and_sum_tickets(page)
            if tickets_available is None:
                for frame in page.frames[1:]:
                    frame_tickets = await find_and_sum_tickets(frame)
                    if frame_tickets is not None:
                        tickets_available = frame_tickets
                        break
            if tickets_available is None: tickets_available = 0
        
        event = EventData(
            link=event_url, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Å—ã–ª–∫—É, –∞ –Ω–µ —Å—Å—ã–ª–∫—É –º–∞–≥–∞–∑–∏–Ω–∞
            title=title, 
            place=place, 
            time_string=time_string,
            full_description=full_description, 
            price_min=price_min, 
            price_max=price_max, 
            tickets_available=tickets_available
        )
        logger.info(f"‚úÖ [Kvitki] –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã: {title}")
        return asdict(event)

    except Exception as e:
        logger.error(f"‚ùå [Kvitki] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {event_url}: {e}")
        return asdict(EventData(link=event_url, title=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", status="error"))
    finally:
        if page:
            await page.close()


async def parse_site(config: Dict) -> List[Dict]:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å–∞–π—Ç–∞ Kvitki.by —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Playwright."""
    base_url = config.get('url')
    logging.info(f"\n[INFO] –ó–∞–ø—É—Å–∫ Playwright-–ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è: '{config.get('site_name')}'")
    
    pages_to_parse_limit = config.get('pages_to_parse_limit', float('inf'))
    max_events_limit = config.get('max_events_to_process_limit', float('inf'))
    
    event_links = set()
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page_for_lists = await browser.new_page()

        page_num = 1
        while page_num <= pages_to_parse_limit:
            url = f"{base_url}page:{page_num}/"
            logger.info(f"üìÑ –°–∫–∞–Ω–∏—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
            try:
                await page_for_lists.goto(url, timeout=30000)
                await page_for_lists.wait_for_selector('a.event_short', timeout=10000, state='attached')
                locators = page_for_lists.locator('a.event_short')
                
                new_links_on_page = 0
                for i in range(await locators.count()):
                    if len(event_links) >= max_events_limit: break
                    link = await locators.nth(i).get_attribute('href')
                    if link and link not in event_links:
                        event_links.add(link)
                        new_links_on_page += 1

                if new_links_on_page == 0:
                    logger.info(f"   - –ù–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–∞—é —Å–±–æ—Ä.")
                    break
                
                logger.info(f"   - –ù–∞–π–¥–µ–Ω–æ {new_links_on_page} –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫. –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {len(event_links)}")
                if len(event_links) >= max_events_limit:
                    logger.info("   - –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–±—ã—Ç–∏–π. –ó–∞–≤–µ—Ä—à–∞—é —Å–±–æ—Ä.")
                    break
                page_num += 1
            except PlaywrightTimeoutError:
                logger.info(f"   - –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–∞—é —Å–±–æ—Ä.")
                break
            except Exception as e:
                logger.error(f"   - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Å—ã–ª–æ–∫: {e}")
                break
        
        await page_for_lists.close()
        
        event_links_list = list(event_links)
        logger.info(f"\nüîó –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ {len(event_links_list)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        
        if not event_links_list:
            await browser.close()
            return []

        semaphore = asyncio.Semaphore(config.get('concurrent_events', CONCURRENT_EVENTS))
        tasks = []
        async def run_with_semaphore(link):
            async with semaphore:
                return await parse_single_event(browser, link)

        for link in event_links_list:
            tasks.append(asyncio.create_task(run_with_semaphore(link)))
        
        results = await asyncio.gather(*tasks)
        await browser.close()

    final_results = [res for res in results if res.get('status') == 'ok']
    logger.info(f"üéâ –°–±–æ—Ä —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è '{config.get('site_name')}' –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–±—Ä–∞–Ω–æ: {len(final_results)} —Å–æ–±—ã—Ç–∏–π.")
    return final_results

# --- –ë–ª–æ–∫ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
if __name__ == '__main__':
    print("--- –ó–ê–ü–£–°–ö –ê–í–¢–û–ù–û–ú–ù–û–ì–û –¢–ï–°–¢–ê –ü–ê–†–°–ï–†–ê ---")
    print("–ü–∞—Ä—Å–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏.")

    test_config = {
        'category_name': '–ú—É–∑—ã–∫–∞ (–¢–µ—Å—Ç)',
        'url': 'https://www.kvitki.by/rus/bileti/muzyka/',
        'event_type': '–ö–æ–Ω—Ü–µ—Ä—Ç',
        'parsing_method': 'playwright_kvitki',
        'pages_to_parse_limit': 1,
        'max_events_to_process_limit': 3,
    }

    async def run_test():
        results = await parse_site(test_config)
        print("\n--- –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê (–°–´–†–´–ï –î–ê–ù–ù–´–ï) ---")
        print(json.dumps(results, indent=2, ensure_ascii=False))
        print(f"\n–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {len(results)} —Å–æ–±—ã—Ç–∏–π.")

    try:
        asyncio.run(run_test())
    except KeyboardInterrupt:
        print("\n\n–ü—Ä–æ—Ü–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\n–í–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")